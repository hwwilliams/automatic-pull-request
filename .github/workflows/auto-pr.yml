name: Automatic Pull Request

env:
  GH_CLI_PAT: ${{ SECRETS.GH_CLI_PAT }}
  GH_CLI_PR_JSON_FIELDS: closed,headRefName,id,mergeable,mergeStateStatus,number,state,title,url
  REPOSITORY_OWNER: HWWILLIAMS
  REPOSITORY_NAME: automatic-pull-request

on:
  push:
    branches: [main]

jobs:
  auto-pr:
    name: Automatic Pull Request
    if: success() && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Get Date
        id: date
        run: |
          date=$(date +'%Y-%m-%d')
          echo "date=$date" >> $GITHUB_OUTPUT

      - name: Check for Existing Pull Requests
        id: check_pull_request
        shell: pwsh
        run: |
          $RepoFullName="${{ env.REPOSITORY_OWNER }}/${{ env.REPOSITORY_NAME }}"

          echo "Checking for existing pull requests on repository '$RepoFullName'"
          $RepoPRsJson = gh pr -R "$RepoFullName" list --json "${{ env.GH_CLI_PR_JSON_FIELDS }}"

          $OpenRepoPRs = ($RepoPRsJson | ConvertFrom-Json -AsHashtable).Where({ $PSItem.state -eq "OPEN" })
          if ($OpenRepoPRs.Count -ge 2)
          {
            Write-Error "Found $($OpenRepoPRs.Count) release PRs open"
            $OpenRepoPRs
          }
          elseif ($OpenRepoPRs.Count -eq 1)
          {
            Write-Output "Found release PR"
            $OpenRepoPRs

            echo "exist=true" >> $env:GITHUB_OUTPUT
          }
          else
          {
            Write-Warning "Found 0 pull requests for repository '$RepoFullName'"

            echo "exist=false" >> $env:GITHUB_OUTPUT
          }
        env:
          GH_TOKEN: ${{ env.GH_CLI_PAT }}

      - name: Create Pull Request into Release
        if: steps.check_pull_request.outputs.exist == 'false'
        run: |
          git config user.email "${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>"
          git config user.name "${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>"

          echo "Fetch all git branches"
          git fetch --all

          echo "Checkout git branch release"
          git checkout release

          echo "Creating new branch based on release"
          git checkout -b release-${{ steps.date.outputs.date }}

          echo "Merging origin/main into release-${{ steps.date.outputs.date }}"
          git merge origin/main

          echo "Pushing new branch release-${{ steps.date.outputs.date }} to remote"
          git push

          echo "Creating pull request for release-${{ steps.date.outputs.date }} into release"
          gh pr create --base release --head release-${{ steps.date.outputs.date }} --title "Release-${{ steps.date.outputs.date }}" --body "This Pull Request was auto-generated by ${{ github.workflow }}"
        env:
          GH_TOKEN: ${{ env.GH_CLI_PAT }}

      # - name: Merge Incoming Changes into the Open Existing Release Pull Request
      #   if: steps.check_pull_request.outputs.exist == 'true'
      #   run: |
      #     git config user.email "${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>"
      #     git config user.name "${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>"

      #     echo "Querying Release branch for open Pull Requests and merge incoming changes"
      #     gh pr list --state open --base release
      #     gh pr list --state open --base release | awk '{print $5}'

      #     BRANCH=`gh pr list --state open --base release | awk '{print $5}'`

      #     echo $BRANCH
      #     git fetch --all

      #     echo "running : git checkout $BRANCH"
      #     git checkout $BRANCH

      #     echo "runnning : git merge 'origin/main'"
      #     git merge origin/main

      #     echo "running : git push 'origin $BRANCH'"
      #     git push origin $BRANCH
      #   env:
      #     GH_TOKEN: ${{ env.GH_CLI_PAT }}
